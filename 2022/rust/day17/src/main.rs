use std::{cmp::min, fmt::Display};

#[derive(Debug)]
enum Move {
    Left,
    Right,
}

#[derive(Debug)]
enum Shape {
    Minus,
    Plus,
    Edge,
    Bar,
    Cube,
}

const SEQUENCE: [Shape; 5] = [
    Shape::Minus,
    Shape::Plus,
    Shape::Edge,
    Shape::Bar,
    Shape::Cube,
];

const MINUS: [u8; 1] = [0b_0011_1100];
const PLUS: [u8; 3] = [0b_0001_0000, 0b_0011_1000, 0b_0001_0000];
const EDGE: [u8; 3] = [0b_0011_1000, 0b_0000_1000, 0b_0000_1000];
const BAR: [u8; 4] = [0b_0010_0000, 0b_0010_0000, 0b_0010_0000, 0b_0010_0000];
const CUBE: [u8; 2] = [0b_0011_0000, 0b_0011_0000];

struct Chamber {
    stack: Vec<u8>,
    shape_count: usize,
}

impl Chamber {
    fn new(capacity: usize) -> Self {
        Self {
            stack: Vec::with_capacity(capacity),
            shape_count: 0,
        }
    }

    fn rock_position_ok(&self, position: usize, shape: &[u8]) -> bool {
        (position..min(self.stack.len(), position + shape.len()))
            .enumerate()
            .all(|(s, pos)| (shape[s] & self.stack[pos]) == 0)
    }

    fn apply_fall(&mut self, new_position: usize, shape: &[u8]) {
        shape.iter().enumerate().for_each(|(i, s)| {
            self.stack[new_position + i] |= *s;
        });
        self.shape_count += 1;
    }

    fn fill_height(&self) -> usize {
        if let Some((fill, _)) = self
            .stack
            .iter()
            .enumerate()
            .rev()
            .find(|(_, s)| *s & 0b_1111_1110 > 0)
        {
            fill + 1
        } else {
            0
        }
    }

    fn start_next_shape(&mut self) -> &[u8] {
        (0..(4_usize - (self.stack.len() - self.fill_height()))).for_each(|_| {
            self.stack.push(0b_0000_0001);
        });
        match SEQUENCE[self.shape_count % SEQUENCE.len()] {
            Shape::Minus => &MINUS,
            Shape::Plus => &PLUS,
            Shape::Edge => &EDGE,
            Shape::Bar => &BAR,
            Shape::Cube => &CUBE,
        }
    }
}

impl Display for Chamber {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.stack
            .iter()
            .rev()
            .try_fold((), |_, s| -> std::fmt::Result {
                Ok({
                    writeln!(
                        f,
                        "|{}|",
                        (0..7)
                            .map(|i| {
                                if ((0b_1000_0000 >> i) & *s) > 0 {
                                    '#'
                                } else {
                                    '.'
                                }
                            })
                            .collect::<String>()
                    )?;
                })
            })?;
        writeln!(f, "+-------+")
    }
}

fn decode_input(input: &str) -> Vec<Move> {
    input.split_terminator('\n').filter(|l| !l.is_empty()).fold(
        Vec::with_capacity(input.len()),
        |mut acc, l| {
            l.as_bytes().iter().for_each(|b| {
                acc.push(match b {
                    b'<' => Move::Left,
                    b'>' => Move::Right,
                    _ => panic!("unexpected input!"),
                })
            });
            acc
        },
    )
}

fn shift_shape(mov: &Move, shape: &mut [u8]) {
    match mov {
        Move::Left => {
            if shape.iter().all(|s| s & 0b_1000_0000 == 0) {
                shape.iter_mut().for_each(|s| *s <<= 1)
            }
        }
        Move::Right => {
            if shape.iter().all(|s| s & 0b_0000_0010 == 0) {
                shape.iter_mut().for_each(|s| *s >>= 1);
            }
        }
    }
}

fn detect_repeat_pattern(history: &[(usize, usize)]) -> Option<(usize, usize)> {
    let len = history.len();
    if !history.is_empty()
        && len % 2 == 0
        && dbg!(history[(len / 2) - 1].0 * 2) == dbg!(history[len - 1].0)
        && dbg!(history[(len / 2) - 1].1 * 2) == dbg!(history[len - 1].1)
    {
        Some((history[(len / 2) - 1].0, history[(len / 2) - 1].1))
    } else {
        None
    }
}

fn simulate_blocks(moves: &[Move], no_of_blocks: usize) -> usize {
    let mut chamber = Chamber::new(moves.len());
    let mut shape = chamber.start_next_shape().to_vec();
    let mut shape_pos = chamber.stack.len() - 1;
    let mut move_count = 0;
    let mut history = vec![];
    while chamber.shape_count < no_of_blocks {
        // movement by jet stream
        let orig_shape = shape.clone();
        shift_shape(&moves[move_count % moves.len()], &mut shape);
        if !chamber.rock_position_ok(shape_pos, &shape) {
            shape = orig_shape;
        }
        // fall
        if shape_pos == 0 || !chamber.rock_position_ok(shape_pos - 1, &shape) {
            chamber.apply_fall(shape_pos, &shape);
            // println!("{}", &chamber);
            shape = chamber.start_next_shape().to_vec();
            shape_pos = chamber.stack.len() - 1;
        } else {
            shape_pos -= 1;
        }
        // shortcut to prevent long compute times
        if move_count > 0 && move_count % moves.len() == 0 {
            history.push((chamber.shape_count, chamber.fill_height()));
            if let Some((shape_count, height)) = detect_repeat_pattern(&history) {
                println!(
                    "repeating pattern detected: shapes {}, height {}",
                    shape_count, height
                );
                return ((no_of_blocks / shape_count) * height)
                    + simulate_blocks(moves, no_of_blocks % shape_count);
            }
        }
        move_count += 1;
    }
    chamber.fill_height()
}

fn part1(moves: &[Move]) -> usize {
    simulate_blocks(moves, 2022)
}

fn part2(moves: &[Move]) -> usize {
    simulate_blocks(moves, 1000000000000)
}

fn main() {
    let input = decode_input(INPUT);
    println!("{}", part1(&input));
    println!("{}", part2(&input));
}

#[cfg(test)]
mod test {
    use crate::{decode_input, part1, part2};

    #[test]
    fn test_part1() {
        assert_eq!(3068, part1(&decode_input(TEST)));
    }

    #[test]
    fn test_part2() {
        assert_eq!(1514285714288, part2(&decode_input(TEST)));
    }

    const TEST: &str = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
}

const INPUT: &str = r#"
>><<>><<>><><<>><<><>>><>>>><<>>>><<<<>>><<<>>>><>><<<<>>>>
<>><>>><<><>><<>><<>>><<>><<<<>>><>><<<>>>><<>><<><<><<>><>
<<<<>>><><<<<>>><<>><<<<>>><<<<><<><<>>>><<<>>><<<><>><<>>>
<<><<<<>><<>>><>>>><<>>>><<<<>><<<>><<<<>>><<>><<<<>>><<>>>
><<<<>>><>>><>>><><>>>><><<<<><<<><<>><<<>><<<><>>><>><>>>>
<<<<>><<><<<>>>><>>><<<<><<<><<><>>>><<<<>><<>>>><<<>><<<<>
>>><<<>><<>><>><<<<><<<<><<>>>><<>>><><<>><<<>><<<<>>><<<<>
>>><>>><<>>><>>><<<>><><<>><<<<>><<<>>><<<>>>><<<><<<>>><<<
>><<>>>><><>><<><<<><>>>><<>>><<<<>><<<<>><<<<>>><<>><<><><
<<<>>>><<>><<<><>>>><<><<<>>><<<<><<><>>><<>>><><>>>><<<>>>
<<<>><><<<<>>><<<<>>>><<<<>>>><<>><<<><>>><<<<>>>><<<<>><<<
<>>>><<<<><<<>><<<<><>><<<<>>>><><<>><<>>><<<<>><<>><<<><<<
>>>><<>>>><>>><<<>>>><<<><<>>>><<<><<><><<>>><<>>>><<<<>>><
>>><<<<>><<<><<><<<<>><<<><<<<>>>><>><<<<><<<>>><<<>>>><>>>
<<<<>>><<>><>>>><>>>><<<<>>><>>><<<>>>><<<<><>>><>>><>>>><>
>><<<>>>><>><<<>>>><<>>>><<<<>>>><<<>>><<>>>><<<>>><>>>><<<
><>><><<<<><<<<>><<><<<>>><<<<>>>><<>>><<<<>><<<>><<<<><<>>
<<<>>>><<<>>>><<<><>>><<<>>>><<>>>><<<><<<<>>>><<<<>><>><<<
<>>><>>><<><>><<>>>><<>><<>><<>>><<>>><<<<>><<<<>>><>>><>>>
><<>>><<>>><>>><<<<><>>><<<>>>><<<<>><<<<><<<<>>><<>>>><<>>
><<<>>>><>><<<>>>><<<<>><<<><<<<>>><<<>>>><<<><<>>>><<>>><<
<><>>><><<><<>>><<<>><<<>>><<>>><<>>>><<<>>>><<<<><<>><<<>>
>><<>>>><<>>>><<<>><>>>><<>><<<<>>>><<<>>><<>>>><<><<<>>><<
<<>>>><<<<>>><<>>>><<<<><>>><<<><>><<>><<<><>><<<>><>><<<<>
><>><>>>><<>><<>><<<<>>><<<>>>><<>>>><<>><<<<><>>>><<>><<><
><<<><>>><<<<>>>><<<>>><>><<><<<<>>><<<<>><<>><<><><>><<<<>
<<<<>>>><<>>><>>>><<<>><<>><<>>><<<<>>><<<<><<<<>>><<<<>><<
<<><<<><<><>>>><<<<>><<><<>><>>><<<<>>><<<><<<<>>><<>>><<<>
>><>>><>><<><><<<<><><<<<>>><<<>><<><<<<>>>><>>><<<>><<<<><
>><<<<>>>><<<<>><<<<>><<<<>>>><<><<<><<>><<<><<<<>><<<<>><<
<<>>>><<<><<>>><<>>>><<<<>>>><<<>>>><<<<><<<<>>>><<<>>>><<>
>>><>>>><<>>>><>>>><<<>>><<<<>><<>>>><<<<><<<<>>><<<<>>>><>
><<<>><><<<<>>><>>><>>>><<<<>><<<>><<<<>>><<>>><<<<><<>><<<
>>><<>><<<><<>><<>>>><<><<><>><>>>><<><><<><<<>>><<<<>>><>>
<<<<><<>>><><<>>><<<<>><<>>>><<>>>><><<>>>><<>>><<<>>>><<<>
>>><<>>><>>><>><<<<>>><<<><<><<<<><<><<<<>>><>><<<<>>>><><<
<>>>><>>>><<<<>>><>><<<>>><<<<>><>><>><<>>>><<<<>>><<<>>><<
>>>><<<<><<>><<<><<<<>>>><>>>><<<>>><<<<>>>><><<>>>><<<<>>>
><<>>><<<<>><<<<>>><>>>><>>>><<>><<<>>><>>><>>><<>>><<><<<<
>>><<>>><<>>><<<><>><<<>>><<<<>>><<>>><<<><<<<>>>><>>><>><<
>>>><<<>>><><><<<>><<<<><<<><<<><<>>>><<<<>>>><>><<<<>><<>>
<<<>>><<>><<<<>>>><<<>>><<<>>><<<<>>><<<>>><<<><<<<>>>><<<<
>><<>><<<>>>><<><<<>>><<>><<<<><<<>><<<<>>>><>><<<><<<<>>><
<>>>><><<<>>>><>><<><<<<>><<<>>><<<>>><<><<<<>>>><<<<>>>><>
>>><<<><>><<<<><><<<>><>><<<<>>>><<>>><<<>>>><<<<>>>><<<><>
<<<>>>><<>><<>>>><<>><<>><<>><<<<>>>><<<<>>>><<<>>>><<<>>>>
<<<>>>><<<<>>>><<<>>>><<>><<>><<<<>>><<><<<<><<>>>><<>>>><<
>><<<<><<>>><<<>>>><<>>>><<><<>><<>><<><<<<>>>><<<>>><>><>>
<<<<>><<<>><<<<>>>><<<<>>>><><>>><<<<>><<<>>><<<>><><<<<>><
<<<>><<<<>>>><>><<>>>><<>>>><>><<>>>><<<<><<<>><>>>><<<<>>>
<<<><<<>>>><>>>><<>><>>>><>><<<<>>>><><>><<<>>><>><>><<<<>>
>><>>>><<<>><><<><<>>>><<>>>><<>>><><<>>>><><<<>><<>>><><<<
>>><<<><<<><<<>>><>><<><<<<>><<<<>>>><>>><<<>>><<<<><>>><<>
>><<><<>><><<<>><>>>><<<><><<<<>>>><<<>><>>><<>>>><<<<>>><>
><<<>><>>><<><<<><>>><<<<>>><<<>><<>>><>><<<>>><<<<>><<>><<
<<>>>><>><<>>><>>><<<>>><>>><<<<><<><>><>>><<>>>><<>>>><<<<
><<<<>>>><<>>><<><<>>><>>>><<<>>><>>>><<<>>><<<>>>><<<<><<>
>>><>>><<<<>>><<<<>>><><<<<>>>><<>><<<>><<><>><>><>>><<<><>
<>><<><>><<<>>>><<<>>><<<<>>><<>><><<<<>>><<<<><<<>>>><<<<>
><<<>>><<>><>><>><<<<>><<<<>>>><>>>><<<<>>><<>>><<<>>><<<><
<<><><<>>><<<>>>><<<<>><<<>>>><<><<<><<>>>><<><<<>><<><<>>>
><<<><<<<>><>>><<<><<><<<<><<>><>><>>>><>>>><<<<>><<<>><<<>
>><<>>>><<>><<>><<><<<<>>>><<<<>><<<<>>><>>>><<<<><<<>>>><<
>>>><<>>><<<>>><<<>>><<><<>>>><><<<<>>><<<>>>><<><<<<><<<>>
<<<>><<<>>>><<<<>>><<><<<<><<<>>>><<>><>>><<<<>>>><>><>>>><
<>>>><>><>>>><<<><<<<>>><<>>><>>><>>><><<<<><><>>>><<<<>>>>
<<<<>>><<>>><<>>><>>>><<<<>>><>>><>><>>>><<>><<><>><><<<><<
>><<><<<<>>>><>><<<>>><<>>><<<>>>><<<<>><<<>>>><<>>><>><<<>
<>><<<<>>>><<><<>><<<>><<>>>><>>><<<<>>>><<<>>><<<>>><<<>>>
><<<><<<>>><<>>><>><<>><>><><>><>>>><>>><<<>>><<<<><>>>><<<
>>><>><><<>><<<<>><<<<>>>><>><<>>><<>>>><<<<>>>><<<>>>><<<<
>><>>>><<>><>><<<><<>>><<<<>><>><<<<>><>>><<<<>>><>>>><>>>>
<<<><<>>><><<<<>><>><<<<>>><<>><<<<>>>><<<><><<<<>><<<<>>>>
<<<<>>><<<>><<<<>>><<>><<>>>><<<<>><<>>>><<>>>><<<>>>><>>>>
<<>>><><<<><><<<>>>><>>><<<<>><>>>><<<>>><<<>>><>><<<>>><<<
>>>><<<<>><>><<<<>>>><<>>><<><>><<<>><<<<>>><<<<><<<<><<<>>
><<<<>>>><>>>><><<<><<><>>>><><>>>><<>><>>><<<<>><<<<>><>><
<>>>><<>><<>>><>>>><<>>>><<<<>>>><>><>>><<><>><<>>><<<>>>><
<>>><<<<>>><<<<>>>><<<<><<><<>>>><<<>><<>><<<<><<>>><><>><<
>>>><><<<<>><<<><<>>>><<<><<><<>><<>>><>>>><<>>>><><>>><<<<
>>>><<>><<<><<<<>><<<>>><<<>><<<<>>>><<<<>>>><<>><>><<<<>>>
<><<<>>><>><<<>><>>>><<<>>><<>>>><<<<><<>><<<>><<<>>>><>><<
>><<><<>><<>>>><<>>><><<<>><>><><>><<<>>>><<<><<>>><>><>>>>
<<<><>>><<<><<>>><<>>>><<<<>><<<>><<><<<<>>><><<<>><>>><<><
<<>>>><>>><>><>>><<<<>>><><<<<>>><<>>>><<<<>>>><>>><<><<<<>
>>><<>>><>>><><<<>>><<<>><<<<><<<>>>><<<>>><<<<>>>><<<<>>>>
<<>>>><<<<><>>>><>>>><<<>>>><<>>><<>>>><<<<>><<>><<<>><<>>>
<<>>>><<><<<<>>>><<<>><<<>>>><<<<>><<<>>>><<>>>><<>><<>>>><
<<>><>>>><<<>>>><<<>>>><<<><>><<>><>><<<>>>><<<<>>><<<<>>><
<><<<<>>><><<>>>><<<>>>><>>>><<><<<>>><<><>><<<<>>><><<>>><
<<<>>>><<<>><<<>><<<>>><<<>><<<>>>><<>>>><><<<>><<<<><>>><>
<<>>>><><<<<><<>>>><<><<<<>>><<<>>><<<<>><<><<<<>>><<<<><<>
>><<>><>><>><<<>><<<>><<>><<<<>>>><<<><<>>>><>>><<><<>><<<>
>>><<<>>><>>><<<>>>><<<<><<>>><<<<>>>><<>>><<<<>><<>>><><<<
<><<<>>>><<<>>>><>>><>><<<<>>><<>><>>>><<<><<<<>>><<>>>><<<
>><<<><<<<><<<<>>><<<><<<>>><<>><<<>>><<<<>><>>>><>>><<>>>>
<<>>><<<<>>>><<><>>>><<<><<<>>><<<><>><<<<>>>><<<>>>><<>><>
>><<<<>><>><<>><<<>>>><<<><<<<>>><>>>><<<>>><<><<>>><<<<>>>
<<<<><<>>>><>>><<<<>>>><<<<>><<<>>><<<>>><<<<>><<<><<<><<<<
>>><<>>><<<<><<<>>><>><<<><<<><<<><>><<><<<>>><<<>><<<<>><<
<<><<<<><<<<><<<<>>>><<>>>><<<>>><<<>>><<<<>>><<>>>><><>><>
>>><<>>>><<<>><<<><<>><<<<>>><<>>>><>><<>>>><<<><<>>>><<<>>
><<<<><<><<<<><<>>>><<<>>><<<>>>><<>>>><><>><<<>>>><<<<>><<
<<>>>><<>>><<<<><<><><<<<>><<<<>>><<<<>><<<<>>><<<<>><>><<<
<><<<>><<<<><<<>>><<>><<<>>><><<<>>>><<>>><<<>>><>><<<<>>>>
<<<<>><<<><<<<>>>><<<<>>><<<><<<<>>><>>>><<<>>>><<<>>><<<<>
><<<<>>><<<>><<<>>><<<<><<<<><<<><>>><<<<>><><<<<><><<<><><
>><<>><>>>><<>><<<>><<<<>><>>>><<>><<<<>>><>><<<>><<<<>>><<
<><>><<><><><<<<>>>><<<<>>><<>><<>>>><<>>><<<>>><<<<><>><>>
<<<<><<<<><>><<><<>>>><><<<<>><<>><<<<>>>><<<>>><<<<>>>><<<
<>><<<><<>>><<<<>>>><<<>><<<><<<<>><>><<>>><<<>>>><<<<>><<>
>><<<>>><<<<><<<><<<<>>><<>><<>>>><<><>>><<>>>><<>>><<>>>><
<>>><<<><<>>><>>>><<<>>><<<><<>>>><<<<>>><<<<>>>><<<>><<><<
><<<<><<<><<<><<<><>>>><<>>><><<>>>><>>><<>>>><<<<><<<>><<>
>><<<>>><<<<>><>><<>>>><<<<><<<><<<>>>><<<<>><>>><>>><<><<<
<>><<<<>>>><<<>>><><>>><<<>>>><<<<>><<<>>><>>><<<<>>><<<<>>
>><>><<<<>><<<><>><<>><<>>><>><<>>>><>>>><<<<>><>>>><<<>><<
>>>><<<>>>><<>><<>>><<<<>>><<<>>>><<>>>><<>><<>>><<><<<>><<
<>>><><<>>>><<<<>>><<<>>><>>><<<<>>>><<<<><<<>><>>>><>><<<<
>><<<<><<<>>><<><<<>>><<<<>><<>>>><<<<>>><<<<>>>><>>>><><<>
<>>><<<>><<<>>>><<><<<>>>><<><<<<>>>><<<>>>><<<>>><<<<><>>>
<<<>>><><>>>><>>>><>>>><<<>><<<<>><<<<>>>><<>>><<>>><<<>><<
>>><<<<>>>><<<<>>>><<><<<<>>><<<>><>>>><>>><>>><<<>>>><<><<
<<>>><<<<>><<<<><<<>><<<><<<<><<<>><>>>><>><><<<<><>>><<<<>
>><<<>><<<>>>><<<<>>><<<<><<<>><<>>>><<>>>><<<>>><>><>><>><
<><<<>>>><<<<>>><<<>>><<<>>><>>>><<<<>>>><<<<>>>><<><<<<>>>
><>><<<<>><<<<>>><<<<>>>><>><<<<>>><<<><<<<>>><>><><<<>>>><
<<<>>><<<<>><<<>>><<>>>><<<>>><<<>>>><>>>><<<<>>>><<>>><<<>
>>><<<><<<>><<><<<>><<<><>><<>>><<<><<>><<<>>>><<<<><<<><<>
><<<>>>><<><<<<><<>>><<>>><<<<>><<>>>><<<>><>>>><<><<>>><<<
>>>><<<>>>><<><<<<>>>><<<<>><<<<>>><<<<>>>><<>>>><<<><<>>><
<<>>>><<<>>>><<<><<<>>><<>>><<>>>><><<>>>><<><<<<>>><<<<><>
>><<<<>>>><><<<<>><<><<>><<<<>>>><<<<>>>><<<<>><<<<>>><><>>
>><<<<>>>><<><<><<<>>><><<>>>><>>><<<<>><>><>><<<<>>><>><<<
>>>><<>><<<>>><><<>>><>><<<><<<><<<<><<>><<>>>><<<<><<>>>><
<<>>>><<<>>>><<>>>><>><<<<><<<>>><><<<><<<<>>>><><<<>>><>>>
><<<<>><<<<>>><>>><<<<>>><<<<>><<<<><><>>>><><>><<>>>><<<<>
>><<<><<>><>>>><<<>>>><<<>>>><<<<>><<<<>><<<<>><>>><><>>>><
<<<>>><<<<>>>><<>>><<<<>>>><<<<>><<<>>>><<<>>><<<>>><<<>>>>
<<<>>>><<<>>><<<>><<<<>><<<>>><><<>>>><<<><<><<<<>>><>>>><>
>>><>><<<><<>>><<<>>>><><<><<<<>>>><<<>>>><<>><>>><<>><<<>>
><>>>><<>>>><<<<><<<>>>><<<<><<<<>><<<>>><<<><<<<>>><<<><<<
>>>><>>>><><>>>><<>><<<<>>><<>><><>><<<<><>><<<<>><>><<<>>>
<<<<>>><<>>><<<<>>><<><<<<>>>><<<<>><<<>>><<<<>>><<>>><<<<>
><<><<<<>>><<<><<<<><>>><<<<>><<>>>><<<<>>><<<<>>><<<>>><<<
<><<>>>><<>>>><<>>><<<<>>>><<<>>><<<<><<>><<<<><<<<>>>><<<<
>>><<>><<<<>>><<<>>>><>>>><<>>>><<<<>><<><<>>>><<>>><<<>><<
<><>>><<>>><<>><>><<>>>><>>><<<<>><<<>><>><<<<>>><<<<><><<>
>>><<<>>><<<>>>><<<<><>>><<>><<<<><<>>>><<<<><<<>><<<<>>>><
<<><<<<>>><<<>>>><>>>><>>><<<>>>><>><>>><>>><<<>><<<<><<>>>
<><<<<>>>><<<>>>><<>><><>><>><>><<><<<<>>><>><<<>>>><<<<>>>
<<<>>><<<<>>><<>><<<>><>>><<<<>>>><<<<>><<<>>><<<><<<<>>>><
<<>><<<<><<<<>>><<<>><<><<<>>>><<<<>><>>>><<<<>><>>><<><<>>
<<>><>>><<><<>><<><<<<>>>><>>>><<>>>><<<>>><<>>><<<>><<<<>>
><>><<><<<>><<>><<<>>>><<<>>><<<<>><>>>><<><<<<><><<<>>>><>
<<<>><<<><<<>><<<<><<>><<>>><<>>><<<<>>>><<><>>><<<<>>><><<
><<<<><<<<>>>><>>>><<>>><<<>><>><<><<<>><<>>><<<<>><<>>><<>
>>><<<<>><<<>>><<>>><<<<><<>>><<><<>>><<<>><>><<<>>>><>>><<
<><<<>><<>>>><<><>>><<<<>>>><<>>><<<>><<<<><<>>>><<<><<<<>>
>><<>>><<><><<<><<<>>><>>>><<<>><<<<>>>><<<>><<<<>>><>>>><<
<><>><>>><<<<>>>><>>><>>><<<<>>>><<>>>><<><<>>>><<<<>><>><<
>>>><<>>>><>>><>><<<<>>>><<>>>><><>>>><<<<>>><<<<>>>><>>><<
<>>><<<>><>>>><<<>>>><<<<>><<<<>>><<><<<><><<>>>><<<<>><<<<
>><<>>>><<<>>>><<><<>>><>>><<<<>>><<<<>>>><<><><<<>><<><<<>
>><<><<>>><<<>>><<>><<><<<>><><<<<>>>><<<>>>><<<>>><<<<>><<
<>>><<>><<<>>><<<>>><<<>>>><>><><<<<>>><>><>>>><<>>><>>><>>
<<<>><<>><<<<>>>><<<><<<<>><<>>><>><<<>>>><<<>>><<>>><><<>>
>><<<<>><<<><<>>>><<<>><<<>>>><<<<>>><<>>><<<<><<>>><<<<>>>
<<>>>><<<><>><<>>>><<><<>>><<<<>><>><<>>>><<>>><><<<><<<<>>
<><<><><<<<>>><<<>><>>>><<><<<<>>><<<<>>><<<<>>>><>><<><<<>
<<<>>><<>>><<<<>><<><<><<<><<<>>><<>><>>>><>>>><<<<>>>><<<>
>>"#;
